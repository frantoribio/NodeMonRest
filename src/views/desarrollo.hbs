<!-- Begin page content -->
<style>
  .bd-placeholder-img {
    font-size: 1.125rem;
    text-anchor: middle;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  @media (min-width: 768px) {
    .bd-placeholder-img-lg {
      font-size: 3.5rem;
    }
  }
</style>



<main role="main" class="container">
  <div class="nav-scroller bg-white shadow-sm">
    <nav class="nav nav-underline">
      <a class="nav-link active" href="#">Presentación</a>
      <a class="nav-link" href="#tecnicas">Técnicas</a>
      <a class="nav-link" href="#dependencias">Dependencias</a>
      <a class="nav-link" href="#estructuracion">Estructuración</a>
      <a class="nav-link" href="#implementacion">Implementación</a>
      <a class="nav-link" href="#pruebas">Pruebas</a>
      <a class="nav-link" href="#despliegue">Despliegue</a>
    </nav>
  </div>
  <div class="d-flex align-items-center p-3 my-3 bg-smoke rounded shadow-sm">
    <img class="mr-3" src="/res/api.png" alt="" width="48" height="48">
    <div class="lh-100">
      <h4 class="mb-0 text-light lh-100">Desarrollo</h4>
      <smal class='text-white-50'>API RESTfull</smal>
    </div>
  </div>

  <div class="my-3 p-3 bg-white rounded shadow-sm">
    <p class='text-justify'>Este proyecto tiene nombre de Pokemon :). El objetivo principal docente es aplicar distintas
      técnicas para construir un
      esqueleto de API REST usable en distintos proyectos. La idea es hacer un esqueleto lo suficientemente genérico,
      adaptable y extensible en módulos para ser aplicado en distintos problemas y con él resolver cuestiones que se nos
      pueden presentar genéricas en cada uno de ellos, con el objetivo de mostrar para el ámbito docente como poder
      realizarlo. Es una aplicación puramente docente.</p>
  </div>

  <a name="tecnicas"></a>
  <div class="my-3 p-3 bg-white rounded shadow-sm">
    <h6 class="border-bottom border-gray pb-2 mb-0">Técnicas</h6>
    <div class="media text-muted pt-3">
      {{!-- <svg class="bd-placeholder-img mr-2 rounded" width="32" height="32" xmlns="http://www.w3.org/2000/svg"
          preserveAspectRatio="xMidYMid slice" focusable="false" role="img" aria-label="Placeholder: 32x32">
          <title>Técnicas</title>
          <rect width="100%" height="100%" fill="#007bff" /><text x="50%" y="50%" fill="#007bff" dy=".3em">32x32</text>
        </svg> --}}
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Diseño distribuido</strong>
        Distribución de los elementos del sistema. Tenemos distribuídos en distintos nodos cada uno de los componentes
        cruciales
        del sistema: codigo, información y almacenamiento de ficheros
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Patrón MVC</strong>
        Patrón <a href="https://es.wikipedia.org/wiki/Modelo%E2%80%93vista%E2%80%93controlador" rel="nofollow">MVC</a>.
        La vista
        será cualquier cliente que consuma nuestra API.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Diseño asíncrono</strong>
        Uso de <a href="https://lemoncode.net/lemoncode-blog/2018/1/29/javascript-asincrono"
          rel="nofollow">Asíncronía</a>
        y respuesta a Eventos. Uso de promesas e interacción basada en eventos que
        es uno de los aspectos más
        fuetes de <a href="https://nodejs.org/es/" rel="nofollow">NodeJS</a> en backend.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Almacenamiento NoSQL</strong>
        Acceso a bases de datos NoSQL usando <a href="https://www.mongodb.com/es" rel="nofollow">Mongo DB</a>.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Autenticación y autorización</strong>
        Autenticación y autorización usando <a href="https://jwt.io/introduction/" rel="nofollow">JWT</a>, uso de
        permisos de usuario. Manejo de <a href="https://developer.mozilla.org/es/docs/Web/HTTP/Access_control_CORS"
          rel="nofollow">CORS</a>.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">JS Estándar y con estilo</strong>
        JS Código <a href="https://www.ecma-international.org/ecma-262/" rel="nofollow">ECMA2019</a>. De esta manera nos
        aseguramos seguir los estándares marcados para este tipo de lenguaje, pero tratando los módulos como indica
        NodeJS,
        usando Babel para compatibilidad. Además se ha aplicado el stilo <a href="https://airbnb.io/javascript/"
          rel="nofollow">AirBnB</a> uno de los más seguidos con el objetivo de mantener una flosofía de sintáxis y
        estilo de
        programación ampliamente seguida en la comunidad JS/Node.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Almacenamiento en a nube</strong>
        Almacenamiento en la nube usando <a href="https://aws.amazon.com/es/" rel="nofollow">AWS</a>.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Desarrollo CI/CD</strong>
        Desarrollo <a href="https://www.redhat.com/es/topics/devops/what-is-ci-cd" rel="nofollow">CI/CD</a> usando <a
          href="https://github.com/features/actions">GitHub Actions</a>.
      </p>
    </div>
    <small class="d-block text-right mt-3">
      <a href="#">Arriba</a>
    </small>
  </div>

  <a name="dependencias"></a>
  <div class="my-3 p-3 bg-white rounded shadow-sm">
    <h6 class="border-bottom border-gray pb-2 mb-0">Dependencias</h6>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Packaje.json</strong>
        Este es el fichero que fija la estructura de nuestro proyecto, sus dependencias y las distintas formas de
        ejecutarlo.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Dependencias de desarrollo</strong>
        Existe dos tipos de dependencias que debes tener en cuenta a la hora de ejecutar o expandir este proyexto.
        Depdendecias de desarollo, son las librerías que te ayudan a desarrollar el producto y sirven de apoyo al mismo.
        Pueden ser Babel, ESLint, Mocha, Chai, etc. Dentro del package.json las tienes en el apartado devDependecies.
        Se instalan con npm installl --save-dev
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Dependencias de ejecución</strong>
        Son las dependencias imprescindibles para la ejecución de tu proyecto y por lo tanto deben estar con él siempre
        en en el entorno donde se ejecute. Son por ejemplo Express, Cors, AWS. Dentro del package.json las tienes en el
        apartado dependecies.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Scrpts de ejecución</strong>
        Tareas que podemos ejecutar dentro de nuestra aplicación. Te recomiendo leer el fichero package.json el apartado
        script, ten cuedado que los comandos son dependeientes del sistema operativo:<br>
        - npm install: para instalar las dependencias.active <br>
        - npm run start-dev: ejecuta el entorno de desarrollo, el codigo en src. <br>
        - npm run watch: ejecuta nodemon para ver los cambios del código sobre la marcha. <br>
        - npm run build: construye la versión de distribución (en el directorio dist). <br>
        - npm start (npm run start): ejecuta la versión de distribución, antes has tenido que ejecutar npm build. <br>
        - npm run test (o test-x) Ejecuta todos los test o el test x(auth, recipes, users) que quieras.<br>
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Requisitos del sistema</strong>
        Para que se ejecute correctamente necesitas:<br>
        - <a href="https://nodejs.org/es/" rel="nofollow">NodeJS.</a> , versión superior a la 10. Probado con la <a
          href="https://nodejs.org/es/download/" rel="nofollow">última version</a>. <br>
        - <a href="https://www.npmjs.com/" rel="nofollow">NPM</a> con versión superior a la 6.4.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Requisitos externos</strong>
        Para que se ejecute correctamente necesitas:<br>
        - <a href="https://www.mongodb.com/es/" rel="nofollow">MongoDB.</a> como motor de base de datos NoSQL. Se ha
        optado por usar <a href="https://www.mongodb.com/cloud/atlas" rel="nofollow">Monto DB Atlas</a>, su alternativa
        en la nube. Para crear tu cluster y tu base de datos para tus colecciones así como las conexiones y filtros de
        la mismas te invito que leas <a href="https://docs.atlas.mongodb.com/getting-started/" target="_blank"
          rel="noopener noreferrer">este tutorial</a>. Tienes ya unos datos de ejemplo en la carpeta mongo.<br>
        - <a href="https://aws.amazon.com/es/" rel="nofollow">Amazon AWS</a>, para el almacenamiento en la nube si
        sigues la rama principal. Es un poco complejo configurarlo para tener las claves de acceso. Te invito que sigas
        <a href="https://medium.com/@anikislam/setting-up-aws-s3-bucket-and-uploading-and-getting-files-using-express-js-part-1-ebbc1bcabb2b"
          target="_blank" rel="noopener noreferrer">este tutorial</a>. No olvides en todo añadir el permiso delete para
        borrar recursos.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Fichero .env</strong>
        El API toma las constantes o variables de entorno que necesita para ejecutarse del fichero .env, te dejo un
        ejemplo de configuración en .env_example. Cámbialo y lo
        configuras a tu gusto y luego lo renombras. Es importante que conozcas las variables de entorno que necesitas,
        si
        algunas no las pones las cogerá por defecto de la clase env.js que se encarga de gestionarlas. Si no las tienes
        te dará un
        error. Con esto tenemos nuestra API parametrizada a cualquier configuración y no está sujeta o embebida dentro
        del código.
      </p>
    </div>
    <small class="d-block text-right mt-3">
      <a href="#">Arriba</a>
    </small>
  </div>

  <a name="estructuracion"></a>
  <div class="my-3 p-3 bg-white rounded shadow-sm">
    <h6 class="border-bottom border-gray pb-2 mb-0">Estructuración</h6>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">MVC</strong>
        Este proyecto sigue una estructuración MVC (o más bien MC) modelo controlador, aunque generemos alguna vista con
        las templates. Además tenemos ficheros de enrutación específicos y middleware para controles de identificación y
        permisos.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">raíz</strong>
        Tenemos los ficheros de configuración del proyecto y de los plugisn de desarrollo.Estos son: <br>
        - package.json: configuración del proyecto y sus dependencias.<br>
        - nodemon.json: configuración de nodemon.<br>
        - .eslintrc.json: configuración del linter del código usando node, ems2019 y estilo AirBnB. <br>
        - .env: variables de entorno para la ejecución. <br>
        - .babel.rc: configuración de babel con estilo AirBnB.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">src</strong>
        Ficheros principales de la estructura del proyecto: <br>
        - index.js: fichero del servidor bajo instancia de singleton usando Express.<br>
        - env.js: lee y configura las variables de entorno para la ejecución del mismo. <br>
        - config.js: crea la configuración de nuestro servidor. <br>
        - database.js: carga la base de datos en modo asíncrono, el servidor no arrancará si no hay conexión a la base
        de
        datos. <br>
        - router.js: es el encargado de indexar y procesar todos los ficheros de enrutación. Es decir, todas las
        peticiones que se nos hacen.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">routes</strong>
        Ficheros de rtutas donde se filtran las peticiones a un recurso y su tipo, y se procesa por el controlador indicado (y su método): <br>
        - users.js: rutas sobre el recurso de usuarios.<br>
        - files.js: rutas sobre el recurso de ficheros. <br>
        - recipes.js: rutas sobre el recurso de recetas. <br>
        - auth.js: rutas sobre el recurso de autorización.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">models</strong>
        Ficheros que definen los modelos de dominio del problema: <br>
        - users.js: el recurso de usuarios.<br>
        - files.js: el recurso de ficheros. <br>
        - recipes.js: el recurso de recetas. <br>
        - tokenRefresh.js: el recurso token de refresco.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">cotrollers</strong>
        Ficheros que definen los controladores del sistema y sus métodos: <br>
        - users.js: controlador del recurso de usuarios.<br>
        - files.js: controlador del recurso de ficheros. <br>
        - recipes.js: controlador del recurso de recetas. <br>
        - tokenRefresh.js: controlador del recurso de token de refresco. <br>
        - auth.js: controlador del recurso de autorización y autenticación. <br>
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">middleware</strong>
        Ficheros que definen los middleware del problema sobre Express: <br>
        - auth.js: middleware para la autenticación y autorización.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">views</strong>
        Ficheros que definen las vistas de nuestras web usando el lenguaje de plantillas <a href="https://handlebarsjs.com/" target="_blank">Handlebars</a>.
      </p>
    </div>
    <small class="d-block text-right mt-3">
      <a href="#">Arriba</a>
    </small>
  </div>

  <a name="implementacion"></a>
  <div class="my-3 p-3 bg-white rounded shadow-sm">
    <h6 class="border-bottom border-gray pb-2 mb-0">Implementación</h6>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Seguimiento</strong>
        Para seguir este proyecto lo mejor que puedes hacer es comenzar desde el directorio raiz, despues a src, siguiendo por rutas. A partir de aquí cada uno de los controladores para acabar en los modelos. <br>
        De esa manera irás profundizando en el proyecto de más alto nivel a más bajo nivel.
      </p>
    </div>
    <div class="media text-muted pt-3">
      <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
        <strong class="d-block text-gray-dark">Librerías y código generado</strong>
        A continuación copmento algunas de las librerías más importantes usadas y el por qué de su código: <br>
        - <a href="https://expressjs.com/es/" rel="nofollow">Express</a>. Framework de aplicaciones web para la API. Con
            ellos creo y gestiono las rutas. Además nos permite fácilmente crear middlewares, con lo cual podremos aplicar logs
            específicos, filtrar para autorizaciones y autenticaciones y ampliar mediante middleware. Es lo que más me gusta de
            esta librería. Te recomiendo mirar el código de los ficheros route y middleware para ver como realizo estas
            acciones. Una de las cosas importantes es como he creado el servidor para que pueda ser levantado como instancia en
            cada una de las pruebas. <br>
        - <a href="https://mongoosejs.com/" rel="nofollow">Mongoose</a>. Conjunto de librerías para operar con bases de dato
            MongoDB. He implementado el acceso usando singletón.<br>
        - <a href="https://www.npmjs.com/package/jwt-simple" rel="nofollow">JWT-Simple</a>. Para implementar la atenticación
            basada en JWT. Esta librería actúa en base a middleware con Express. Los propios tokens que caducan dependiendo del
            valor de .env TOKEN_LIFE en minutos. Para la parte de autorización, también los hemos encapsulado en ellos los
            permisos de usuario que tengan. También hemos usado el <a
              href="https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/" rel="nofollow">refresco de
              tokens</a>, en base a UUID almacenando los tokens de refresco en MongoDB con un índice TTL de la colección en base
            al valor de .env TOKEN_REFRESH en minutos. De esta manera se autodestruyen pasado ese tiempo y libera el tokens de
            refresco asociado al token de usuario, dando un poco de seguridad extra. El objetivo de implementar este tipo de
            token de refresco es que si el access token tiene fecha de expiración, una vez que caduca, el usuario tendría que
            autenticarse de nuevo para obtener un access token. Con el refresh token, este paso se puede saltar y con una
            petición al API obtener un nuevo access token que permita al usuario seguir accediendo a los recursos de la
            aplicación, hasta que el refresh token caduque. Se debe tener en cuenta que el TTL del Token de autentificación debe
            ser menor que el de refresco.<br>
        - <a href="https://www.npmjs.com/package/body-parser" rel="nofollow">Body Parser</a>. Middleware que parsea los body
            como objetos.<br>
        - <a href="https://www.npmjs.com/package/cors" rel="nofollow">Cors</a>. Middleware para manejo de <a
              href="https://developer.mozilla.org/es/docs/Web/HTTP/Access_control_CORS" rel="nofollow">CORS</a>.<br>
        - <a href="https://www.npmjs.com/package/dotenv" rel="nofollow">Dotenv</a>. Para leer las variables de entorno del
            fichero .env<br>
        - <a href="https://www.npmjs.com/package/morgan" rel="nofollow">Morgan</a>. Middleware Request logger el cual nos
            permitirá sacar logs de nuestras peticiones HTTP.<br>
        - <a href="https://www.npmjs.com/package/uuid" rel="nofollow">UUID</a>. Implementa el RFC4122 UUIDs para los tokens
            de refresco.<br>
        - <a href="https://www.npmjs.com/package/express-fileupload" rel="nofollow">Express-fileupload</a>. Es un middleware
            para Express el cual nos ayuda a procesar peticiones multipart o subida de imágenes. Se ha puesto que el tamaño
            máximo por umagen sea 2MB aunque se puede cambiar el el fichero .env. Los directorios para almacenar imágenes o
            ficheros están en .env, puedes poner el mismo o lo que quieras, pues se crean dinámicamente dentro de public/uploads
            (FILES_PATH) y accesible directamente por la ruta url/files (FILES_URL). Puedes ponerle el mismo si quieres.<br>
        - <a href="https://aws.amazon.com/es/" rel="nofollow">AWS</a> Se ha implementado el sistema de almacenamiento en a
            nube para no depender localmente del servidor. Si quieres la versión en el servidor revisa <a
              href="https://github.com/joseluisgs/NodeMonRest/tree/Ficheros_Locales">esta rama</a>. La idea de usar este tipo de
            tecnologías es aprender a usar almacenamiento en la nube siguiendo la folosofía de distribución de cada uno de los
            elementos del sistema: código, bases de datos y ficheros.<br>
        - <a href="https://www.npmjs.com/package/express-handlebars" rel="nofollow">Express-handlebars</a>. Personalmente
            uno de los mejores motores de plantillas para NodeJS, basado en <a href="https://handlebarsjs.com/"
              rel="nofollow">Handlebars</a>. Lo he usado de ejemplo para hacer algunas páginas estáticas de presentación de la
            API.
      </p>
    </div>
    <small class="d-block text-right mt-3">
      <a href="#">Arriba</a>
    </small>
    </div>

    <a name="pruebas"></a>
    <div class="my-3 p-3 bg-white rounded shadow-sm">
      <h6 class="border-bottom border-gray pb-2 mb-0">Pruebas</h6>
      <div class="media text-muted pt-3">
        <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
          <strong class="d-block text-gray-dark">Test automatizados</strong>
          Para mejorar los test de nuestro código se ha usado las siguientes librerías:<br>
          - <a href="https://mochajs.org/" rel="nofollow">Mocha</a>. Framework para correr las pruebas<br>
          - <a href="https://www.chaijs.com/" rel="nofollow">Chai</a>. Librerá de asercciones que nos permite ejecutar pruebas y analizar sus resultados. <br>
          Se han utilizado estas librerías para los test por su funcionalidad y porque se adaptan
          perfectamente al proceso de integración continua que se ha marcado como objetivo.<br>
          De esta manera automatizamos unos test donde arrancamos y paramos el servidor en cada uno de ellos, Probando cada una de las llamadas con datos de ejemplo y pudiendo detectar falsos positivos. Creoq ue son librerías de rereferencia en JS. <br>
          Por otro lado se han programado en el fichero package.json distintos script para realizar los test. Uno por recurso y varios específicos:
          - test: Ejecuta todos los test uno detrás de otro como un solo conjunto (informe global). <br>
          - test-auth: realiza test sobre el recurso auth. <br>
          - test-files: realiza test sobre el recurso ficheros. <br>
          - test-recipes: realiza test sobre el recurso recetas. <br>
          - test-users: realiza test sobre el recurso usuarios. <br>
          - test-ci: realiza test sobre los recursos indicados y de esta manera al haora de hacer el CI obrtengo informes detallados paso por paso. <br>
        </p>
      </div>
      <div class="media text-muted pt-3">
        <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
          <strong class="d-block text-gray-dark">Compatibilidad</strong>
          Para mejorar los test de nuestro código se ha usado las siguientes librerías: <br>
          - <a href="https://babeljs.io/" rel="nofollow">Babel</a>. Con ello nos aseguramos que el código sea compatible en distintas versiones de entornos JS y que han sido indicadas en el fichero .babelrc. De esta manera cuando consruimos nuestro sistema (build) el código generado es el indicado para las plataformas de destino. <br>
          - <a href="https://eslint.org/" rel="nofollow">ESLint</a>. Gracias a ella cumplimos con una sitáxis estandarizada y además apliacamos una guía de estilo con el objetivo que nuestro código sea uniforme, como se puede ver en el fichero .eslintrc.json
        </p>
      </div>
      <div class="media text-muted pt-3">
        <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
          <strong class="d-block text-gray-dark">Postman</strong>
          Se ha utilizado <a href="https://www.postman.com/" target="_blank">Postman</a> como cliente para probar y consumir la API y con ello analizar su funcionalidad a alto nivel con casos de uso determinados.<br>
          Además se ha <a href="https://documenter.getpostman.com/view/11271351/Szt78VKQ?version=latest" target="_blank" rel="noopener noreferrer">documentado la API</a>  con este sistema donde se puede ver como consumirla con distintos lenguajes y librerías.
        </p>
      </div>
      <small class="d-block text-right mt-3">
        <a href="#">Arriba</a>
      </small>
      </div>

      <a name="despliegue"></a>
      <div class="my-3 p-3 bg-white rounded shadow-sm">
        <h6 class="border-bottom border-gray pb-2 mb-0">Despliegue</h6>
        <div class="media text-muted pt-3">
          <p class="media-body pb-3 mb-0 small lh-125 border-bottom border-gray">
            <strong class="d-block text-gray-dark">CI/CD: GitHub Actions</strong>
            Se ha seguido un proceso de intergración, despliegue y distribución continua en base a <a href="https://github.com/features/actions">GitHub Actions</a>. Es una de las grandes herramientas que se ha
            usado para la integración/distribución continuas <a href="https://www.redhat.com/es/topics/devops/what-is-ci-cd"
              rel="nofollow">CI/CD</a>. Para ello hemos integrado el entorno de ejecución con pruebas y el despliegue en distintos sistemas y plataformas. Te recomiendo mires los códigos disponibles en la carpeta .github/workflows. Además dischos depegues en fases o pasos solo se realiza si los pasos anteriores o condicionales se han completado de manera correcta.<br>
              A partir de aquí hemos realizado los siguientes despliegues automatizados ala hora de publicar en la rama principal: <br>
            - Docker en <a href="https://hub.docker.com/r/joseluisgs/nodemonrest" rel="nofollow">DockerHub</a>. <br>
            - Y para su uso en <a href="https://nodemonrest.herokuapp.com/" rel="nofollow">Heroku</a>.<br>
            Por otro lado hemos creado una nueva acción que se activa cada vez que lanzamos una nueva release o tag de código que crea el paquete y lo sube a plataformas:<br>
            - NPM. <br>
            - GitHub Package.
          </p>
        </div>
        <small class="d-block text-right mt-3">
          <a href="#">Arriba</a>
        </small>
        </div>

</main>
